module.exports = function (grunt) {

  grunt.initConfig({

    // Read project settings from package.json. No modification needed.
    pkg: grunt.file.readJSON('package.json'),

    // Define commonly used directories (e.g. src, build, release).
    // Default structure assumes a source folder for all source files,
    // a temp folder for temporary files generated by Grunt,
    // and an output folder for built files. Modify as needed.
    dirs: {
      source: '.',
      temp: 'temp',
      output: 'dist'
    },

    // Determine the environment to build the app. It first checks for an
    // `--env` option supplied by the user when running grunt (e.g.
    // `grunt --env=production`). If there is no option specified,
    // it searches for the environment variable `GRUNT_ENV`.
    // Finally, it defaults to development.
    env: grunt.option('env') || process.env.GRUNT_ENV || 'development',


    // Task configurations.

    jshint: {
      options: {
        // Files to skip linting.
        ignores: ['<%= dirs.source %>/js/bootstrap*', '<%= dirs.source %>/js/bootstrap/*'],
        // Set to false to fail the task on jshint errors.
        force: true,
        // Define globals. Defaulting to jQuery, AngularJS and UnderscoreJS.
        globals: {
          jQuery: true,
          angular: true,
          _: true
        },
        browser: true
      },
      development: {
        options: {
          // Allow use of debug statements.
          devel: true
        },
        src: ['<%= dirs.source %>/js/**/*.js']
      },
      production: {
        src: ['<%= dirs.source %>/js/**/*.js']
      }
    },

    concat: {
      options: {
        separator: ';'
      },
      js: {
        // Define each file to concatenate here. Make sure they are in the correct order.
        src: [
          '<%= dirs.source %>/js/bootstrap.js',
          '<%= dirs.source %>/vendor/angular/angular.js',
          '<%= dirs.source %>/js/app.js'
        ],
        dest: '<%= dirs.output %>/js/app.js'
      }
    },

    uglify: {
      options: {
        sourceMap: true,
        preserveComments: 'some'
      },
      development: {
        options: {
          beautify: true
        },
        src: '<%= concat.js.dest %>',
        dest: '<%= dirs.output %>/js/app.min.js'
      },
      production: {
        src: '<%= concat.js.dest %>',
        dest: '<%= dirs.output %>/js/app.min.js'
      }
    },

    compass: {
      options: {
        // optional config file for Compass
        config: 'config/compass.rb',
        sassDir: '<%= dirs.source %>/sass',
        cssDir: '<%= dirs.output %>/css'
      },
      development: {
        options: {
          environment: 'development'
        }
      },
      production: {
        options: {
          environment: 'production'
        }
      }
    },

    autoprefixer: {
      css: {
        src: ['<%= compass.options.cssDir %>/**.css']
      }
    },

    bless: {
      options: {
        logCount: true
      },
      css: {
        src: ['<%= compass.options.cssDir %>/**.css']
      }
    },

    watch: {
      gruntfile: {
        files: 'Gruntfile.js',
        options: {
          reload: true
        }
      },
      js: {
        files: ['<%= dirs.source %>/js/**/*.js'],
        tasks: ['newer:jshint:development', 'concat', 'uglify:development']
      },
      css: {
        files: ['<%= compass.options.sassDir %>/**/*.{scss,sass}'],
        tasks: ['compass:development']
      },
      images: {
        files: ['<%= dirs.source %>/images/**/*.{png,jpg,gif}'],
        tasks: ['newer:imagemin']
      },
      livereload: {
        files: ['<%= dirs.output %>/**/*', '**/*.html'],
        options: {
          livereload: true
        }
      }
    },

    connect: {
      // Start a connect server to serve static files and livereload.
      development: {
        options: {
          port: 9001,
          // Set this to the folder containing index.html, relative to Gruntfile.
          base: '.',
          livereload: true,
          keepalive: true
        }
      }
    },

    clean: {
      temp: '<%= dirs.temp %>',
      dist: '<%= dirs.output %>'
    },

    notify_hooks: {
      options: {
        duration: 3
      }
    },

    imagemin: {
      images: {
        files: [{
          expand: true,
          cwd: '<%= dirs.source %>/images/',
          src: ['**/*.{png,jpg,gif}'],
          dest: '<%= dirs.output %>/images/'
        }]
      }
    },

    copy: {
      all: {
        files: [{
          expand: true,
          cwd: '<%= dirs.source %>/fonts/',
          src: ['**'],
          dest: '<%= dirs.output %>/fonts/'
        },
        {
          expand: true,
          cwd: '<%= dirs.source %>/vendor/',
          src: ['**'],
          dest: '<%= dirs.output %>/vendor/'
        }]
      }
    }

  });

  require('load-grunt-tasks')(grunt);

  grunt.task.run('notify_hooks');

  var env = grunt.config('env');
  // Force env to be development if it's not exactly production
  if (env !== 'production') {
    env = 'development';
  }

  var jsTasks = ['jshint:' + env, 'concat', 'uglify:' + env];
  grunt.registerTask('dist-js', jsTasks);

  var cssTasks = ['compass:' + env, 'autoprefixer', 'bless'];
  grunt.registerTask('dist-css', cssTasks);

  var imgTasks = ['imagemin'];
  grunt.registerTask('dist-images', imgTasks);

  grunt.config('concurrent', {
    dist: ['dist-js', 'dist-css', 'dist-images', 'copy'],
    livereload: {
      options: {
        logConcurrentOutput: true
      },
      tasks: ['connect', 'watch']
    }
  });

  grunt.registerTask('dist', ['clean:dist', 'concurrent:dist']);
  grunt.registerTask('default', ['clean', 'concurrent:dist', 'concurrent:livereload']);

};
